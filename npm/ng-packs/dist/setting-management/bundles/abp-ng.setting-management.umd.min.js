!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@angular/router"),require("rxjs"),require("@ngxs/router-plugin"),require("@ngxs/store"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@abp/ng.setting-management",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@angular/router","rxjs","@ngxs/router-plugin","@ngxs/store","rxjs/operators"],t):t(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng["setting-management"]={}),e.ng_core,e.ng_theme_shared,e.ng.core,e.ng.router,e.rxjs,e.routerPlugin,e.store,e.rxjs.operators)}(this,function(e,t,n,r,i,s,a,o,c){"use strict";var u=function(){function e(e,t){var n,r=this;this.router=e,this.store=t,this.settings=[],this.selected={},this.destroy$=new s.Subject,this.router.events.pipe(c.filter(function(e){return e instanceof i.RouteConfigLoadEnd}),c.takeUntil(this.destroy$)).subscribe(function(e){n&&(n.unsubscribe(),r.destroy$.next()),n=s.timer(150).subscribe(function(){r.setSettings()})})}return e.prototype.ngOnDestroy=function(){this.destroy$.next()},e.prototype.setSettings=function(){var e=this;setTimeout(function(){var t=e.router.config.find(function(e){return"setting-management"===e.path});e.settings=t.data.settings.sort(function(e,t){return e.order-t.order}),e.checkSelected()},0)},e.prototype.checkSelected=function(){var e=this;this.selected=this.settings.find(function(t){return t.url===e.router.url})||{},!this.selected.name&&this.settings.length&&this.setSelected(this.settings[0])},e.prototype.setSelected=function(e){this.selected=e,this.store.dispatch(new a.Navigate([e.url]))},e.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:i.Router},{type:o.Store}]},e.ngInjectableDef=r.ɵɵdefineInjectable({factory:function(){return new e(r.ɵɵinject(i.Router),r.ɵɵinject(o.Store))},token:e,providedIn:"root"}),e}();var d=function(){function e(e,t){this.settingManagementService=e,this.router=t,this.trackByFn=function(e,t){return t.name},e.selected&&this.router.url!==e.selected.url&&e.settings.length&&e.setSelected(e.settings[0])}return e.prototype.ngOnDestroy=function(){},e.prototype.ngAfterViewInit=function(){var e=this;s.timer(250).subscribe(function(){e.settingManagementService.settings.length||e.settingManagementService.setSettings()})},e.type="setting",e.decorators=[{type:r.Component,args:[{selector:"abp-setting-layout",template:'<div class="row entry-row">\n  <div class="col-auto">\n    <h1 class="content-header-title">{{ \'AbpSettingManagement::Settings\' | abpLocalization }}</h1>\n  </div>\n  \x3c!-- <div id="breadcrumb" class="col-md-auto pl-md-0">\n    <abp-breadcrumb></abp-breadcrumb>\n  </div> --\x3e\n  <div class="col">\n    <div class="text-lg-right pt-2" id="AbpContentToolbar"></div>\n  </div>\n</div>\n\n<div id="SettingManagementWrapper">\n  <div class="card">\n    <div class="card-body">\n      <div *ngIf="!settingManagementService.settings.length" class="text-center">\n        <i class="fa fa-spinner fa-spin"></i>\n      </div>\n      <div class="row">\n        <div class="col-3">\n          <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\n            <li\n              *abpFor="\n                let setting of settingManagementService.settings;\n                trackBy: trackByFn;\n                orderBy: \'order\';\n                orderDir: \'ASC\'\n              "\n              (click)="settingManagementService.setSelected(setting)"\n              class="nav-item"\n              [abpPermission]="setting.requiredPolicy"\n            >\n              <a\n                class="nav-link"\n                [id]="setting.name + \'-tab\'"\n                role="tab"\n                [class.active]="setting.name === settingManagementService.selected.name"\n                >{{ setting.name | abpLocalization }}</a\n              >\n            </li>\n          </ul>\n        </div>\n        <div class="col-9">\n          <div *ngIf="settingManagementService.settings.length" class="tab-content">\n            <div\n              class="tab-pane fade show active"\n              [id]="settingManagementService.selected.name + \'-tab\'"\n              role="tabpanel"\n            >\n              <h2>{{ settingManagementService.selected.name | abpLocalization }}</h2>\n              <hr class="my-4" />\n              <router-outlet></router-outlet>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'}]}],e.ctorParameters=function(){return[{type:u},{type:i.Router}]},e}();var g={routes:[{name:"Settings",path:"setting-management",parentName:"AbpUiNavigation::Menu:Administration",layout:"application",order:6,iconClass:"fa fa-cog"}]},l={routes:g,settings:[]},p=[{path:"setting-management",component:t.DynamicLayoutComponent,children:[{path:"",component:d}],data:l}],m=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[i.RouterModule.forChild(p)],exports:[i.RouterModule]}]}],e}(),f=d,v=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{declarations:[f],imports:[m,t.CoreModule,n.ThemeSharedModule],entryComponents:[f]}]}],e}();e.SETTING_LAYOUT=f,e.SETTING_MANAGEMENT_ROUTES=g,e.SettingLayoutComponent=d,e.SettingManagementModule=v,e.ɵa=u,e.ɵb=m,e.ɵc=g,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=abp-ng.setting-management.umd.min.js.map