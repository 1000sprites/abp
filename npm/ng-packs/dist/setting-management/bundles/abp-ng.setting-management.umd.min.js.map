{"version":3,"sources":["ng://@abp/ng.setting-management/lib/services/setting-management.service.ts","ng://@abp/ng.setting-management/lib/components/setting-layout.component.ts","ng://@abp/ng.setting-management/lib/constants/routes.ts","ng://@abp/ng.setting-management/lib/setting-management-routing.module.ts","ng://@abp/ng.setting-management/lib/setting-management.module.ts"],"names":["SettingManagementService","router","store","timeout","_this","this","settings","selected","destroy$","Subject","events","pipe","filter","event","RouteConfigLoadEnd","takeUntil","subscribe","unsubscribe","next","timer","setSettings","prototype","ngOnDestroy","setTimeout","route","config","find","r","path","data","sort","a","b","order","checkSelected","setting","url","name","length","setSelected","dispatch","Navigate","Injectable","args","providedIn","Router","Store","SettingLayoutComponent","settingManagementService","trackByFn","_","item","ngAfterViewInit","type","Component","selector","template","SETTING_MANAGEMENT_ROUTES","routes","parentName","layout","iconClass","Éµ0","component","DynamicLayoutComponent","children","SettingManagementRoutingModule","NgModule","imports","RouterModule","forChild","exports","SETTING_LAYOUT","SettingManagementModule","declarations","CoreModule","ThemeSharedModule","entryComponents"],"mappings":"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","sourcesContent":["import { SettingTab } from '@abp/ng.theme.shared';\nimport { Injectable } from '@angular/core';\nimport { RouteConfigLoadEnd, Router } from '@angular/router';\nimport { Navigate } from '@ngxs/router-plugin';\nimport { Store } from '@ngxs/store';\nimport { Subject, Subscription, timer } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class SettingManagementService {\n  settings: SettingTab[] = [];\n\n  selected = {} as SettingTab;\n\n  private destroy$ = new Subject();\n\n  constructor(private router: Router, private store: Store) {\n    let timeout: Subscription;\n    this.router.events\n      .pipe(\n        filter(event => event instanceof RouteConfigLoadEnd),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(event => {\n        if (timeout) {\n          timeout.unsubscribe();\n          this.destroy$.next();\n        }\n        timeout = timer(150).subscribe(() => {\n          this.setSettings();\n        });\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n  }\n\n  setSettings() {\n    setTimeout(() => {\n      const route = this.router.config.find(r => r.path === 'setting-management');\n      this.settings = route.data.settings.sort((a, b) => a.order - b.order);\n      this.checkSelected();\n    }, 0);\n  }\n\n  checkSelected() {\n    this.selected = this.settings.find(setting => setting.url === this.router.url) || ({} as SettingTab);\n\n    if (!this.selected.name && this.settings.length) {\n      this.setSelected(this.settings[0]);\n    }\n  }\n\n  setSelected(selected: SettingTab) {\n    this.selected = selected;\n    this.store.dispatch(new Navigate([selected.url]));\n  }\n}\n","import { eLayoutType } from '@abp/ng.core';\nimport { SettingTab } from '@abp/ng.theme.shared';\nimport { Component, TrackByFunction } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { timer } from 'rxjs';\nimport { SettingManagementService } from '../services/setting-management.service';\n\n@Component({\n  selector: 'abp-setting-layout',\n  templateUrl: './setting-layout.component.html',\n})\nexport class SettingLayoutComponent {\n  // required for dynamic component\n  static type = eLayoutType.setting;\n\n  trackByFn: TrackByFunction<SettingTab> = (_, item) => item.name;\n\n  constructor(public settingManagementService: SettingManagementService, private router: Router) {\n    if (\n      settingManagementService.selected &&\n      this.router.url !== settingManagementService.selected.url &&\n      settingManagementService.settings.length\n    ) {\n      settingManagementService.setSelected(settingManagementService.settings[0]);\n    }\n  }\n\n  ngOnDestroy() {}\n\n  ngAfterViewInit() {\n    timer(250).subscribe(() => {\n      if (!this.settingManagementService.settings.length) {\n        this.settingManagementService.setSettings();\n      }\n    });\n  }\n}\n","import { ABP, eLayoutType } from '@abp/ng.core';\n\nexport const SETTING_MANAGEMENT_ROUTES = {\n  routes: [\n    {\n      name: 'Settings',\n      path: 'setting-management',\n      parentName: 'AbpUiNavigation::Menu:Administration',\n      layout: eLayoutType.application,\n      order: 6,\n      iconClass: 'fa fa-cog',\n    },\n  ] as ABP.FullRoute[],\n};\n","import { DynamicLayoutComponent } from '@abp/ng.core';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SETTING_MANAGEMENT_ROUTES } from './constants/routes';\nimport { SettingLayoutComponent } from './components/setting-layout.component';\n\nconst routes: Routes = [\n  {\n    path: 'setting-management',\n    component: DynamicLayoutComponent,\n    children: [{ path: '', component: SettingLayoutComponent }],\n    data: { routes: SETTING_MANAGEMENT_ROUTES, settings: [] },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingManagementRoutingModule {}\n","import { CoreModule } from '@abp/ng.core';\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\nimport { NgModule } from '@angular/core';\nimport { SettingLayoutComponent } from './components/setting-layout.component';\nimport { SettingManagementRoutingModule } from './setting-management-routing.module';\n\nexport const SETTING_LAYOUT = SettingLayoutComponent;\n\n@NgModule({\n  declarations: [SETTING_LAYOUT],\n  imports: [SettingManagementRoutingModule, CoreModule, ThemeSharedModule],\n  entryComponents: [SETTING_LAYOUT],\n})\nexport class SettingManagementModule {}\n"]}