!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngxs/store"),require("primeng/table"),require("@angular/forms"),require("rxjs"),require("rxjs/operators"),require("@angular/router")):"function"==typeof define&&define.amd?define("@abp/ng.tenant-management",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngxs/store","primeng/table","@angular/forms","rxjs","rxjs/operators","@angular/router"],t):t(((e=e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng["tenant-management"]={}),e.ng_core,e.ng_theme_shared,e.ng.core,e.ngBootstrap,e.store,e.table,e.ng.forms,e.rxjs,e.rxjs.operators,e.ng.router)}(this,function(e,t,n,a,o,r,i,s,p,l,c){"use strict";var d=function(){return(d=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function u(e,t,n,a){var o,r=arguments.length,i=r<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,n):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,a);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(i=(r<3?o(i):r>3?o(t,n,i):o(t,n))||i);return r>3&&i&&Object.defineProperty(t,n,i),i}function m(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}var g,f=function(){function e(){}return e.type="[TenantManagement] Get",e}(),b=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Get By Id",e}(),h=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Add",e}(),y=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Update",e}(),v=function(){function e(e){this.payload=e}return e.type="[TenantManagement] Delete",e}(),T=function(){function e(e){this.rest=e}return e.prototype.get=function(){return this.rest.request({method:"GET",url:"/api/multi-tenancy/tenants"})},e.prototype.getById=function(e){var t={method:"GET",url:"/api/multi-tenancy/tenants/"+e};return this.rest.request(t)},e.prototype.delete=function(e){var t={method:"DELETE",url:"/api/multi-tenancy/tenants/"+e};return this.rest.request(t)},e.prototype.add=function(e){var t={method:"POST",url:"/api/multi-tenancy/tenants",body:e};return this.rest.request(t)},e.prototype.update=function(e){var t="/api/multi-tenancy/tenants/"+e.id;delete e.id;var n={method:"PUT",url:t,body:e};return this.rest.request(n)},e.prototype.getDefaultConnectionString=function(e){var t={method:"GET",responseType:"text",url:"/api/multi-tenancy/tenants/"+e+"/defaultConnectionString"};return this.rest.request(t)},e.prototype.updateDefaultConnectionString=function(e){var t={method:"PUT",url:"/api/multi-tenancy/tenants/"+e.id+"/defaultConnectionString",params:{defaultConnectionString:e.defaultConnectionString}};return this.rest.request(t)},e.decorators=[{type:a.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[{type:t.RestService}]},e.ngInjectableDef=a.ɵɵdefineInjectable({factory:function(){return new e(a.ɵɵinject(t.RestService))},token:e,providedIn:"root"}),e}(),M=function(){function e(e){this.tenantManagementService=e}return e.get=function(e){return e.result.items||[]},e.prototype.get=function(e){var t=e.patchState;return this.tenantManagementService.get().pipe(l.tap(function(e){return t({result:e})}))},e.prototype.getById=function(e,t){var n=e.patchState,a=t.payload;return this.tenantManagementService.getById(a).pipe(l.tap(function(e){return n({selectedItem:e})}))},e.prototype.delete=function(e,t){var n=e.dispatch,a=t.payload;return this.tenantManagementService.delete(a).pipe(l.switchMap(function(){return n(new f)}))},e.prototype.add=function(e,t){var n=e.dispatch,a=t.payload;return this.tenantManagementService.add(a).pipe(l.switchMap(function(){return n(new f)}))},e.prototype.update=function(e,t){var n=this,a=e.dispatch,o=e.getState,r=t.payload;return a(new b(r.id)).pipe(l.switchMap(function(){return n.tenantManagementService.update(d({},o().selectedItem,r))}),l.switchMap(function(){return a(new f)}))},u([r.Action(f),m("design:type",Function),m("design:paramtypes",[Object]),m("design:returntype",void 0)],e.prototype,"get",null),u([r.Action(b),m("design:type",Function),m("design:paramtypes",[Object,b]),m("design:returntype",void 0)],e.prototype,"getById",null),u([r.Action(v),m("design:type",Function),m("design:paramtypes",[Object,v]),m("design:returntype",void 0)],e.prototype,"delete",null),u([r.Action(h),m("design:type",Function),m("design:paramtypes",[Object,h]),m("design:returntype",void 0)],e.prototype,"add",null),u([r.Action(y),m("design:type",Function),m("design:paramtypes",[Object,y]),m("design:returntype",void 0)],e.prototype,"update",null),u([r.Selector(),m("design:type",Function),m("design:paramtypes",[Object]),m("design:returntype",Array)],e,"get",null),e=u([r.State({name:"TenantManagementState",defaults:{result:{},selectedItem:{}}}),m("design:paramtypes",[T])],e)}(),S=function(){function e(e,t,n,a,o){this.confirmationService=e,this.tenantService=t,this.modalService=n,this.fb=a,this.store=o}return Object.defineProperty(e.prototype,"showInput",{get:function(){return!this.defaultConnectionStringForm.get("useSharedDatabase").value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"connectionString",{get:function(){return this.defaultConnectionStringForm.get("defaultConnectionString").value},enumerable:!0,configurable:!0}),e.prototype.openModal=function(){this.modalService.open(this.modalWrapper)},e.prototype.createTenantForm=function(){this.tenantForm=this.fb.group({name:[this.selected.name||"",[s.Validators.required,s.Validators.maxLength(256)]]})},e.prototype.createDefaultConnectionStringForm=function(){this.defaultConnectionStringForm=this.fb.group({useSharedDatabase:this.useSharedDatabase,defaultConnectionString:this.defaultConnectionString||""})},e.prototype.onEditConnStr=function(e){var t=this;this.selectedModalContent={title:this.selected&&this.selected.id?"AbpTenantManagement::Edit":"AbpTenantManagement::NewTenant",template:this.mTemplateConnStr,onSave:function(){return t.saveConnStr}},this.store.dispatch(new b(e)).pipe(l.pluck("TenantManagementState","selectedItem"),l.switchMap(function(n){return t.selected=n,t.tenantService.getDefaultConnectionString(e)})).subscribe(function(e){t.useSharedDatabase=!e,t.defaultConnectionString=e||"",t.createDefaultConnectionStringForm(),t.openModal()})},e.prototype.saveConnStr=function(){var e=this;this.tenantService.updateDefaultConnectionString({id:this.selected.id,defaultConnectionString:this.connectionString}).pipe(l.take(1)).subscribe(function(){return e.modalService.dismissAll()})},e.prototype.onManageFeatures=function(e){this.selectedModalContent={title:this.selected&&this.selected.id?"AbpTenantManagement::Edit":"AbpTenantManagement::NewTenant",template:this.mTemplateFeatures,onSave:function(){}},this.openModal()},e.prototype.onAdd=function(){var e=this;this.selected={},this.createTenantForm(),this.openModal(),this.selectedModalContent={title:"AbpTenantManagement::NewTenant",template:this.mTemplateTenant,onSave:function(){return e.saveTenant}}},e.prototype.onEdit=function(e){var t=this;this.store.dispatch(new b(e)).pipe(l.pluck("TenantManagementState","selectedItem")).subscribe(function(e){t.selected=e,t.selectedModalContent={title:"AbpTenantManagement::Edit",template:t.mTemplateTenant,onSave:function(){return t.saveTenant}},t.createTenantForm(),t.openModal()})},e.prototype.saveTenant=function(){var e=this;this.tenantForm.valid&&this.store.dispatch(this.selected.id?new y(d({},this.tenantForm.value,{id:this.selected.id})):new h(this.tenantForm.value)).subscribe(function(){return e.modalService.dismissAll()})},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpTenantManagement::TenantDeletionConfirmationMessage","AbpTenantManagement::AreYouSure",{messageLocalizationParams:[t]}).subscribe(function(t){"confirm"===t&&n.store.dispatch(new v(e))})},e.decorators=[{type:a.Component,args:[{selector:"abp-tenants",template:'<div id="wrapper" class="card">\n  <div class="card-header">\n    <div class="row">\n      <div class="col col-md-6">\n        <h5 class="card-title">\n          {{ \'AbpTenantManagement::Tenants\' | abpLocalization }}\n        </h5>\n      </div>\n      <div class="text-right col col-md-6">\n        <button\n          [abpPermission]="\'AbpTenantManagement.Tenants.Create\'"\n          id="create-tenants"\n          class="btn btn-primary"\n          type="button"\n          (click)="onAdd()"\n        >\n          <i class="fa fa-plus mr-1"></i>\n          <span>{{ \'AbpTenantManagement::NewTenant\' | abpLocalization }}</span>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class="card-body">\n    <div id="data-tables-table-filter" class="data-tables-filter">\n      <label\n        ><input\n          type="search"\n          class="form-control form-control-sm"\n          placeholder="Search"\n          (input)="dt.filterGlobal($event.target.value, \'contains\')"\n      /></label>\n    </div>\n    <p-table #dt [value]="datas$ | async" [globalFilterFields]="[\'name\']" [paginator]="true" [rows]="10">\n      <ng-template pTemplate="header">\n        <tr>\n          <th>{{ \'AbpTenantManagement::Actions\' | abpLocalization }}</th>\n          <th>{{ \'AbpTenantManagement::TenantName\' | abpLocalization }}</th>\n        </tr>\n      </ng-template>\n      <ng-template pTemplate="body" let-data>\n        <tr>\n          <td>\n            <div ngbDropdown class="d-inline-block">\n              <button\n                class="btn btn-primary btn-sm dropdown-toggle"\n                data-toggle="dropdown"\n                aria-haspopup="true"\n                ngbDropdownToggle\n              >\n                <i class="fa fa-cog mr-1"></i>{{ \'AbpTenantManagement::Actions\' | abpLocalization }}\n              </button>\n              <div ngbDropdownMenu>\n                <button\n                  [abpPermission]="\'AbpTenantManagement.Tenants.Update\'"\n                  ngbDropdownItem\n                  (click)="onEdit(data.id)"\n                >\n                  {{ \'AbpTenantManagement::Edit\' | abpLocalization }}\n                </button>\n                <button\n                  [abpPermission]="\'AbpTenantManagement.Tenants.ManageConnectionStrings\'"\n                  ngbDropdownItem\n                  (click)="onEditConnStr(data.id)"\n                >\n                  {{ \'AbpTenantManagement::ConnectionStrings\' | abpLocalization }}\n                </button>\n                <button\n                  [abpPermission]="\'AbpTenantManagement.Tenants.ManageFeatures\'"\n                  ngbDropdownItem\n                  (click)="onManageFeatures(data.id)"\n                >\n                  {{ \'AbpTenantManagement::Features\' | abpLocalization }}\n                </button>\n                <button\n                  [abpPermission]="\'AbpTenantManagement.Tenants.Delete\'"\n                  ngbDropdownItem\n                  (click)="delete(data.id, data.name)"\n                >\n                  {{ \'AbpTenantManagement::Delete\' | abpLocalization }}\n                </button>\n              </div>\n            </div>\n          </td>\n          <td>{{ data.name }}</td>\n        </tr>\n      </ng-template>\n    </p-table>\n  </div>\n</div>\n\n<ng-template #modalWrapper let-modal>\n  <div class="modal-header">\n    <h5 class="modal-title" id="modal-basic-title">\n      {{ selectedModalContent.title | abpLocalization }}\n    </h5>\n    <button type="button" class="close" aria-label="Close" (click)="modal.dismiss()">\n      <span aria-hidden="true">&times;</span>\n    </button>\n  </div>\n\n  <form [formGroup]="tenantForm" (ngSubmit)="selectedModalContent.onSave()">\n    <div class="modal-body">\n      <ng-container *ngTemplateOutlet="selectedModalContent.template; context: { $implicit: modal }"></ng-container>\n    </div>\n\n    <div class="modal-footer">\n      <button type="button" class="btn btn-secondary" data-dismiss="modal" (click)="modal.close()">\n        {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\n      </button>\n      <button type="submit" class="btn btn-primary">\n        <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\n      </button>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #mTemplateTenant let-modal>\n  <div class="mt-2">\n    <div class="form-group">\n      <label for="name">{{ \'AbpTenantManagement::TenantName\' | abpLocalization }}</label>\n      <input type="text" id="name" class="form-control" formControlName="name" />\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #mTemplateConnStr let-modal>\n  <div class="mt-2">\n    <div class="form-group">\n      <div class="form-check">\n        <input id="useSharedDatabase" type="checkbox" class="form-check-input" formControlName="useSharedDatabase" />\n        <label for="useSharedDatabase" class="font-check-label">{{\n          \'AbpTenantManagement::DisplayName:UseSharedDatabase\' | abpLocalization\n        }}</label>\n      </div>\n    </div>\n    <div class="form-group" *ngIf="showInput">\n      <label for="defaultConnectionString">{{\n        \'AbpTenantManagement::DisplayName:DefaultConnectionString\' | abpLocalization\n      }}</label>\n      <input type="text" id="defaultConnectionString" class="form-control" formControlName="defaultConnectionString" />\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #mTemplateFeatures let-modal>\n  Manage Features\n</ng-template>\n'}]}],e.ctorParameters=function(){return[{type:n.ConfirmationService},{type:T},{type:o.NgbModal},{type:s.FormBuilder},{type:r.Store}]},e.propDecorators={modalWrapper:[{type:a.ViewChild,args:["modalWrapper",{static:!1}]}],mTemplateConnStr:[{type:a.ViewChild,args:["mTemplateConnStr",{static:!1}]}],mTemplateFeatures:[{type:a.ViewChild,args:["mTemplateFeatures",{static:!1}]}],mTemplateTenant:[{type:a.ViewChild,args:["mTemplateTenant",{static:!1}]}]},u([r.Select(M.get),m("design:type",p.Observable)],e.prototype,"datas$",void 0),e}(),C=function(){function e(e){this.store=e}return e.prototype.resolve=function(){var e=this.store.selectSnapshot(M.get);return e&&e.length?null:this.store.dispatch(new f)},e.decorators=[{type:a.Injectable}],e.ctorParameters=function(){return[{type:r.Store}]},e}(),A=[{path:"",redirectTo:"tenants",pathMatch:"full"},{path:"tenants",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard],data:{requiredPolicy:"AbpTenantManagement.Tenants"},children:[{path:"",component:S,resolve:[C]}]}],w=function(){function e(){}return e.decorators=[{type:a.NgModule,args:[{imports:[c.RouterModule.forChild(A)],exports:[c.RouterModule],providers:[C]}]}],e}(),D=function(){function e(){}return e.decorators=[{type:a.NgModule,args:[{declarations:[S],imports:[w,r.NgxsModule.forFeature([M]),t.CoreModule,i.TableModule,n.ThemeSharedModule,o.NgbDropdownModule]}]}],e}();!function(e){e.State=function(){},e.Item=function(){},e.AddRequest=function(){},e.UpdateRequest=function(){},e.DefaultConnectionStringRequest=function(){}}(g||(g={})),e.TENANT_MANAGEMENT_ROUTES=[{name:"TenantManagement",path:"tenant-management",parentName:"Administration",layout:"application",children:[{path:"tenants",name:"Tenants",order:1,requiredPolicy:"AbpTenantManagement.Tenants",parentName:"TenantManagement"}]}],e.TenantManagementAdd=h,e.TenantManagementDelete=v,e.TenantManagementGet=f,e.TenantManagementGetById=b,e.TenantManagementModule=D,e.TenantManagementService=T,e.TenantManagementState=M,e.TenantManagementUpdate=y,e.TenantsComponent=S,e.TenantsResolver=C,e.ɵa=S,e.ɵb=M,e.ɵc=T,e.ɵd=f,e.ɵe=b,e.ɵf=h,e.ɵg=y,e.ɵh=v,e.ɵj=w,e.ɵk=C,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=abp-ng.tenant-management.umd.min.js.map